// Step 0: Create .env file
// Create an environment variable called DATABASE_URL 
// It should have the link to local db to it of the form:
// "mysql://*username - probs root*:*password*@localhost:*port number*/*database name*"

// Step 1: Ensure database is online

// Step 2:
// Apply changes to database:
// npx prisma migrate dev

// Step 3: - use sudo if given EPERM Error
// Generate prisma client to actually use:
// npx prisma generate

// Step 4:
// Use following link to figure out how to import Prisma Client as needed:
// https://pris.ly/d/importing-client


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model USR_MAIN {
  USR_userid       String         @id @unique
  oper_oper_no     String         @unique
  disabled_reason  String
  FuelTransactions FTK_bulkfuel[]
}

model FTK_bulkfuel {
  id               Int       @id @default(autoincrement())
  datetime_Insert  DateTime
  ftk_date         DateTime
  loc_code         String
  fuel_type        String
  totalizer_start  Decimal?
  eq_no            String?
  pid_info         String?
  odometer         Int?
  qty_fuel         Decimal?
  totalizer_end    Decimal?
  acct_code        String?
  business_purpose String?
  totalizer_update Decimal?
  Location         LOC_MAIN  @relation(fields: [loc_code], references: [LOC_loc_code])
  User             USR_MAIN? @relation(fields: [pid_info], references: [oper_oper_no])

  @@index([loc_code], map: "FTK_bulkfuel_loc_code_fkey")
  @@index([pid_info], map: "FTK_bulkfuel_pid_info_fkey")
}

model LOC_MAIN {
  LOC_loc_code     String         @id @unique
  name             String
  email_addr       String?
  is_fuel_site     Boolean        @default(false)
  FuelTransactions FTK_bulkfuel[]
}

// Following is required for auth to automatically populate these user logins
// As of right now, not sure if we even wanna do this, but here is how we can:
// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String? @db.Text
//   access_token       String? @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String? @db.Text
//   session_state      String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }
 
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@map("sessions")
// }
 
// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime? @map("email_verified")
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
 
//   @@map("users")
// }
 
// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime
 
//   @@unique([identifier, token])
//   @@map("verification_tokens")
// }
